#
# \brief  Test of 'fetchurl
# \author Emery Hemingway
# \date   2016-06-05
#

if {[have_spec odroid_xu] || [have_spec linux]} {
	puts "Run script does not support this platform."
	exit 0
}

set build_components {
	app/fetchurl
	core init
	drivers/nic
	drivers/timer
	lib/vfs/lxip
	server/report_rom
}

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

lappend_if [expr {[nic_drv_binary] == "nic_drv"}] build_components drivers/nic
lappend_if [expr {[nic_drv_binary] == "usb_drv"}] build_components drivers/usb

build $build_components

create_boot_directory

append config {
<config>
	<parent-provides>
		<service name="CPU"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="IRQ"/>
		<service name="LOG"/>
		<service name="PD"/>
		<service name="RAM"/>
		<service name="RM"/>
		<service name="ROM"/>
	</parent-provides>
	<default caps="100"/>
	<default-route>
		<service name="Report"> <child name="report_rom"/> </service>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>}

append_platform_drv_config

append config {
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Timer"/> </provides>
	</start>
	<start name="nic_drv" caps="120">
		<binary name="} [nic_drv_binary] {"/>
		<resource name="RAM" quantum="12M"/>
		<provides> <service name="Nic"/> </provides>
		} [nic_drv_config] {
	</start>
	<start name="report_rom">
		<resource name="RAM" quantum="4M"/>
		<provides> <service name="ROM"/> <service name="Report"/> </provides>
		<config verbose="yes"/>
	</start>

	<start name="fetchurl" caps="500">
		<resource name="RAM" quantum="32M"/>
		<config>
			<report progress="yes"/>
			<vfs>
				<dir name="etc">
					<inline name="resolv.conf">nameserver 1.1.1.1</inline>
				</dir>
				<dir name="dev">
					<log/> <null/> <inline name="rtc">2000-01-01 00:00</inline>
					<inline name="random">01234567890123456789</inline>
				</dir>
				<dir name="socket"> <lxip dhcp="yes"/> </dir>
			</vfs>
			<libc stdout="/dev/log" stderr="/dev/log" rtc="/dev/rtc" socket="/socket"/>
			<fetch url="http://genode.org/about/LICENSE" path="/dev/log" retry="3"/>
		</config>
	</start>
</config>
}

install_config $config

# generic modules
set boot_modules {
	core init ld.lib.so
	curl.lib.so
	fetchurl
	libc.lib.so
	libcrypto.lib.so
	libssh.lib.so
	libssl.lib.so
	lxip.lib.so
	pthread.lib.so
	timer
	vfs_lxip.lib.so
	zlib.lib.so
	report_rom
}

# platform-specific modules
append_platform_drv_boot_modules
lappend boot_modules [nic_drv_binary]

build_boot_image $boot_modules

append_if [have_spec x86]     qemu_args " -net nic,model=e1000 "
append_if [have_spec lan9118] qemu_args " -net nic,model=lan9118 "
append                        qemu_args " -nographic -net user"

run_genode_until {child "fetchurl" exited with exit value 0} 120
